{"version":3,"sources":["components/DolphinDrawer.js","components/DolphinAppBar.js","components/DolphinCommandBar.js","talker/Talker.js","types/Message.js","components/DolphinContent.js","App.js","themes/Themes.js","components/hooks/Hooks.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","mainGrid","display","flexDirection","height","contrastGrid","textAlign","flexGrow","padding","spacing","aboutGrid","srOnly","position","overflow","width","left","DolphinDrawer","props","classes","themeUpdater","filteredProps","Object","keys","reduce","obj","key","Drawer","className","ButtonGroup","orientation","aria-label","Button","onClick","setTheme","onClose","Typography","Link","href","color","menuButton","marginRight","active","palette","talkerActive","main","notActive","talkerNotActive","titleBar","DolphinAppBar","useState","drawerOpen","setDrawerOpen","talkerMonitor","handleOpenDrawer","talker","setContinuityEvent","isListenEnabled","useEffect","isRunning","start","stop","AppBar","Toolbar","IconButton","edge","aria-haspopup","aria-expanded","variant","component","hasSupport","setTalkerListen","aria-pressed","setTalkerSpeak","isSpeakEnabled","open","pad","root","text","primary","DolphinCommandBar","inputMsgRef","useRef","onAction","ev","current","value","onSubmit","preventDefault","Grid","container","item","xs","TextField","id","label","fullWidth","inputRef","size","startIcon","Talker","workEvent","continuityEvent","this","setWorkEvent","_running","f","continuityEventBck","undefined","window","currentTalker","currentRecogRef","recogService","recog","lang","continuous","interimResults","onresult","results","onaudioend","stdStopEvent","msg","voiceMsg","SpeechSynthesisUtterance","speechSynthesis","speak","c","Message","msgText","msgType","type","DATA","messagesBox","right","top","bottom","backgroundColor","background","paper","messagesList","marginLeft","marginTop","marginBottom","commandBar","borderTop","zIndex","default","borderRadius","speakMessages","margin","listen","listenMessages","DolhpinContent","data","setData","addMessage","msgObj","resultList","lastResult","length","transcript","document","getElementById","scrollIntoView","Box","List","map","m","ListItem","Paper","elevation","square","App","name","listenEnabled","speakEnabled","setTalker","useTalkerMonitor","themeName","createMuiTheme","scondary","contrastText","secondary","contrastThreshold","tonalOffset","style","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0c3d93b7.chunk.js","sourcesContent":["import { Drawer, Button, ButtonGroup, Typography, Link, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\"; \n\nconst useStyles = makeStyles((theme) => ({\n    mainGrid: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        height: \"100%\"\n    },\n\n    contrastGrid: {\n        textAlign: \"center\",\n        flexGrow: 1,\n        padding: theme.spacing(3)\n    },\n\n    aboutGrid: {\n        textAlign: \"center\",\n        padding: theme.spacing(3)\n    },\n\n    srOnly: {\n        position: \"fixed\",\n        overflow: false,\n        width: \"1px\",\n        height: \"1px\",\n        left: \"-1000px\",\n    }\n}));\n\nexport default function DolphinDrawer(props) {\n    const classes = useStyles();\n\n    const themeUpdater = props.themeUpdater;\n\n    function changeToDefaultTheme() {\n        themeUpdater.setTheme(\"commom\");\n        props.onClose();\n    }\n\n    function changeToHighContrastTheme() {\n        themeUpdater.setTheme(\"highContrast\");\n        props.onClose();\n    }\n\n    function changeToSepiaTheme() {\n        themeUpdater.setTheme(\"sepia\");\n        props.onClose();\n    }\n\n    const filteredProps = Object.keys(props).reduce((obj, key) => {\n        if (key !== \"themeUpdater\") {\n            obj[key] = props[key];\n        }\n\n        return obj;\n    }, {});\n\n    return (\n        <Drawer {...filteredProps}>\n            <div className={classes.mainGrid}>\n                <div className={classes.contrastGrid}>\n                    <ButtonGroup orientation=\"vertical\"\n                        aria-label=\"Ajuste de contraste\">\n                        <Button onClick={changeToDefaultTheme}>\n                            Normal\n                        </Button>\n                        <Button onClick={changeToHighContrastTheme}>\n                            Alto contraste\n                        </Button>\n                        <Button onClick={changeToSepiaTheme}>\n                            Sépia\n                        </Button>\n                    </ButtonGroup>\n                </div>\n\n                <div className={classes.aboutGrid}>\n                    <Typography >\n                        Desenvolvido por <br/>\n                        <Link href=\"https://cta.ifrs.edu.br/\"\n                            color=\"textPrimary\"> \n                            CTA \n                            <div className={classes.srOnly}>\n                                Centro Tecnológico de Acessibilidade\n                            </div>\n                        </Link>\n                    </Typography>\n                </div>\n            </div>\n        </Drawer>\n    );\n}","\nimport React, { useState, useEffect } from 'react';\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { AppBar, Toolbar, IconButton, Typography } from '@material-ui/core';\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport MicIcon from '@material-ui/icons/Mic';\nimport MicOffIcon from '@material-ui/icons/MicOff';\nimport VolumeUp from '@material-ui/icons/VolumeUp';\nimport VolumeOff from '@material-ui/icons/VolumeOff';\n\nimport DolphinDrawer from \"./DolphinDrawer\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    menuButton: {\n        marginRight: theme.spacing(2)\n    },\n\n    active: {\n        color: theme.palette.talkerActive.main\n    },\n\n    notActive: {\n        color: theme.palette.talkerNotActive.main\n    },\n\n    titleBar: {\n        flexGrow: 1\n    }\n}));\n\nfunction DolphinAppBar(props) {\n    const classes = useStyles();\n    const [drawerOpen, setDrawerOpen] = useState(false);\n    \n    const talkerMonitor = props.talkerMonitor;\n\n    function handleOpenDrawer() {\n        setDrawerOpen(!drawerOpen);\n    }\n\n    function handleTalkerListen() {\n        talkerMonitor.setTalkerListen(!talkerMonitor.isListenEnabled);\n    }\n\n    function handleTalkerSpeak() {\n        talkerMonitor.setTalkerSpeak(!talkerMonitor.isSpeakEnabled);\n    }\n\n    talkerMonitor.talker.setContinuityEvent(() => {\n        return talkerMonitor.isListenEnabled;\n    });\n\n    useEffect(() => {\n        if (talkerMonitor.isListenEnabled) {\n            if (!talkerMonitor.talker.isRunning()) talkerMonitor.talker.start()\n        } else {\n            if (talkerMonitor.talker.isRunning()) talkerMonitor.talker.stop();\n        }\n    });\n\n    return (\n        <AppBar position=\"fixed\">\n            <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton}\n                            color=\"inherit\" aria-label=\"menu\"\n                            onClick={handleOpenDrawer} \n                            aria-haspopup=\"true\"\n                            aria-expanded={drawerOpen}>\n                <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" component=\"h1\" className={classes.titleBar}>\n                    Dolphin\n                </Typography>\n\n                {  \n                    (talkerMonitor.talker.hasSupport()) &&\n                    (<IconButton onClick={handleTalkerListen}\n                            aria-pressed={talkerMonitor.isListenEnabled}\n                            aria-label=\"Conversão fala para texto\">\n                        {\n                            (talkerMonitor.isListenEnabled) ? \n                                <MicIcon className={classes.active} />\n                            :\n                                <MicOffIcon className={classes.notActive} />\n                        }\n                    </IconButton>)\n                 \n                }\n\n                <IconButton onClick={handleTalkerSpeak} \n                            aria-pressed={talkerMonitor.isSpeakEnabled}\n                            aria-label=\"Conversão texto para fala\">\n                    {           \n                        (talkerMonitor.isSpeakEnabled) ?          \n                            <VolumeUp className={classes.active} />\n                        :\n                            <VolumeOff className={classes.notActive} />\n                    }   \n                </IconButton>\n\n            </Toolbar>\n            <DolphinDrawer open={drawerOpen} onClose={handleOpenDrawer} \n                themeUpdater={props.themeUpdater}\n            />\n        </AppBar>\n    );\n}\n\nexport default DolphinAppBar;\n","import { useRef } from \"react\";\n\nimport { Grid, TextField, Button } from \"@material-ui/core\"\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SendIcon from '@material-ui/icons/Send';\n\nconst useStyles = makeStyles((theme) => ({\n    pad: {\n        padding: \"0em 1em\"\n    },\n\n    root: {\n        \"& .Mui-focused\": {\n            color: theme.palette.text.primary,\n        }, \n\n        \"& .MuiInputLabel-root\": {\n            color: theme.palette.text.primary\n        }\n        \n    }\n}));\n\nexport default function DolphinCommandBar(props) {\n    const classes = useStyles();\n    const inputMsgRef = useRef(null);\n\n    function onAction(ev) {\n        if (inputMsgRef.current.value !== \"\") {\n            props.onAction(inputMsgRef.current.value);\n            inputMsgRef.current.value = \"\";\n        }\n    }\n\n    function handleSubmit(ev) {\n        ev.preventDefault();\n        onAction(ev);\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <Grid container>\n                    <Grid item xs={8} className={classes.pad}>\n                        <TextField id=\"input-message\" label=\"Digite sua mensagem\"\n                            fullWidth inputRef={inputMsgRef}\n                            className={classes.root}/>\n                    </Grid>\n                    <Grid item xs={4} className={classes.pad}>\n                        <Button fullWidth variant=\"text\" size=\"large\"\n                            startIcon={<SendIcon />}\n                            onClick={onAction}>\n                            Enviar\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </div>\n    );\n}","\nexport default class Talker {   \n\n    //   private currentRecogRef: any = null;\n    //   private continuityEventBck: any = null;\n\n    /*\n    *   workEvent:   (m:SpeechRecognitionResultList) => void\n    *   continuityEvent: () => boolean\n    */\n      constructor(workEvent, continuityEvent) {\n            this.setWorkEvent(workEvent);\n            this.setContinuityEvent(continuityEvent);\n            this._running = false;\n      }\n\n    /**\n     * f: (m:SpeechRecognitionResultList) => void \n     */\n      setWorkEvent(f) {\n        this.workEvent = f;\n        return this;\n      }\n\n    /**\n     * f: () => boolean\n     */\n      setContinuityEvent(f){\n        this.continuityEvent = f;\n        this.continuityEventBck = f; \n\n        return this;\n      }\n\n      isRunning() {\n        return this._running;\n      }\n\n      hasSupport() {\n        return (window[\"webkitSpeechRecognition\"] || window[\"SpeechRecognition\"]) !== undefined;\n      }\n\n      start() {\n          this.continuityEvent = this.continuityEventBck;\n          let currentTalker = this;\n          let recogService = function () {\n            let SpeechRecog = window[\"webkitSpeechRecognition\"] || window[\"SpeechRecognition\"];\n\n            let recog = new SpeechRecog();\n            recog.lang = \"pt-BR\";\n            recog.continuous = true;\n            recog.interimResults = false;\n\n            recog.onresult = function (ev) {\n                currentTalker.workEvent(ev.results);\n            }\n\n            recog.onaudioend = function (ev) {\n              //console.log(\"AUDIO_END\");\n              if (currentTalker.continuityEvent()) {                \n                currentTalker.currentRecogRef = recogService();\n              }\n            }\n            \n            recog.start();\n            currentTalker._running = true;\n\n            return recog;\n          }\n\n          currentTalker.currentRecogRef = recogService();\n      }\n\n      stop() {\n        this.continuityEvent = Talker.stdStopEvent;\n        this.currentRecogRef.stop();\n        this._running = false;\n      }\n\n      static stdStopEvent = () => false;\n\n      /**\n       * msg:string\n      */\n      static speak(msg) {\n        let voiceMsg = new SpeechSynthesisUtterance(msg);\n        window.speechSynthesis.speak(voiceMsg);\n      }\n\n    /**\n     * f: (m:SpeechRecognitionResultList) => void \n     * c: () => boolean\n     */\n      static hear(f, c) {\n        \n        let recogService = function () {\n            let SpeechRecog = window['webkitSpeechRecognition'] || window['SpeechRecognition'];\n\n            let recog = new SpeechRecog();\n            recog.lang = \"pt-BR\";\n            recog.continuous = true;\n            recog.interimResults = false;\n            \n            recog.onresult = function (ev) {\n                f(ev.results);\n            }\n\n            recog.onaudioend = function (ev) {\n              //console.log(\"AUDIO_END\");\n              if (c()) recogService();\n            }\n            \n            recog.start();\n          }\n\n        recogService();\n\n      }\n};","\nexport default function Message(msgText, msgType) {\n    return {\n        text: msgText,\n        type: msgType\n    };\n}","import { useState, useEffect } from \"react\";\n\nimport {Box, List, ListItem, Paper } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport DolphinCommandBar from \"./DolphinCommandBar\";\nimport Talker from \"./../talker/Talker\";\nimport Message from \"./../types/Message\";\n\nconst DATA = [\n    Message(\"Bem vindo ao Dolphin!\", \"speak\")\n];\n\nconst useStyles = makeStyles((theme) => ({\n    messagesBox:{\n        position: \"fixed\",\n        left: 0, \n        right: 0,\n        top: 0, \n        bottom: 0,\n        overflow: \"auto\",\n        \n        backgroundColor: theme.palette.background.paper\n    },\n\n    messagesList:{\n        marginLeft: \"1.5em\",\n        marginRight: \"1.5em\",\n        marginTop: \"3.5em\",\n        marginBottom: \"3.5em\"\n    },\n\n    commandBar: {\n        position: \"fixed\", \n        bottom: \"0px\", \n        left: \"0px\", \n        right: \"0px\", \n        borderTop: \"1px solid black\", \n        zIndex: 1000,\n        padding: \"0.5em 0.5em\",\n        backgroundColor: theme.palette.background.default\n    },\n\n    speak: {\n        borderRadius: 8,\n        backgroundColor: theme.palette.speakMessages.main,\n        margin: \"1em 0em\"\n    },\n\n    listen: {\n        borderRadius: 8,\n        backgroundColor: theme.palette.listenMessages.main,\n        margin: \"1em 0em\"\n    }\n}));\n\nexport default function DolhpinContent(props) {\n    const classes = useStyles();\n    const [data, setData] = useState(DATA);\n\n    const talkerMonitor = props.talkerMonitor;\n\n    function addMessage(msgObj) {\n        setData([...data, msgObj]);\n    }\n\n    function addSpeakMessage(msg) {\n        addMessage(Message(msg, \"speak\"));\n        if (talkerMonitor.isSpeakEnabled) {\n            Talker.speak(msg);\n        }\n    }\n\n    function addListenMessage(msg) {\n        addMessage(Message(msg, \"listen\"));\n    } \n\n    function toGridMessages() {\n        return data.map((m, id) => (\n            <ListItem \n                className={classes[m.type]} \n                key={id} \n                id={\"msg-\" + id}>            \n\n                    {m.text}\n            </ListItem>\n        ));\n    }\n\n    talkerMonitor.talker.setWorkEvent( (resultList) => {\n        const lastResult = resultList[resultList.length - 1];   \n        addListenMessage(lastResult[lastResult.length - 1].transcript);\n    });\n\n\n    useEffect(() => {\n        const el = document.getElementById(\"msg-\" + (data.length - 1));\n        el.scrollIntoView();\n    });\n\n    return (\n        <>\n            <Box className={classes.messagesBox}>\n                <List className={classes.messagesList}>\n                    { toGridMessages() }\n                </List>  \n            </Box>\n\n            <Paper elevation={0} square={true} className={classes.commandBar}>\n                <DolphinCommandBar onAction={addSpeakMessage} />\n            </Paper>\n        </>\n    );\n\n}\n","\nimport React, { useState } from 'react';\n\nimport { Box, Paper } from \"@material-ui/core\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\n\nimport DolphinAppBar from \"./components/DolphinAppBar\";\nimport DolphinContent from \"./components/DolphinContent\";\nimport { useTalkerMonitor } from \"./components/hooks/Hooks\";\nimport { getTheme } from \"./themes/Themes\";\n\nfunction App() {\n    const talkerMonitor = useTalkerMonitor(false, true);\n    const [themeName, setTheme] = useState(\"commom\");\n\n    const themeUpdater = {\n        themeName,\n        setTheme\n    };\n\n    return (\n        <MuiThemeProvider theme={getTheme(themeName)}>\n            <Paper elevation={0} square={true}>\n                <DolphinAppBar talkerMonitor={talkerMonitor} \n                                themeUpdater={themeUpdater} />\n                <Box style={{marginTop: \"3.5em\"}}>\n                    <DolphinContent talkerMonitor={talkerMonitor} />\n                </Box>\n            </Paper>\n        </MuiThemeProvider>\n    );\n}\n\nexport default App;\n","\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nexport function getTheme(name) {\n    if (name === \"commom\") {\n        return createMuiTheme({\n            palette: {\n                type: \"light\",\n\n                text: {\n                    primary: \"#000000\",\n                    scondary: \"#000000\"\n                },\n\n                speakMessages: {\n                    main: \"#729be7\",\n                    contrastText: \"#000000\"\n                },\n        \n                listenMessages: {\n                    main: \"#daaa71\",\n                    contrastText: \"#FFFFFF\"\n                },\n\n                talkerActive: {\n                    main: \"#00FF00\"\n                },\n\n                talkerNotActive: {\n                    main: \"#FF0000\"\n                }\n            }\n        });\n\n    } else if (name === \"highContrast\"){\n        return createMuiTheme({\n            palette: {\n                type: \"dark\",\n        \n                primary: {\n                    main: \"#000000\",\n                    contrastText: \"#FFFFFF\"\n                },\n        \n                secondary: {\n                    main: \"#000000\",\n                    contrastText: \"#FFFFFF\"\n                },\n\n                text: {\n                    primary: \"#FFFFFF\",\n                    scondary: \"#FFFFFF\"\n                },\n\n                // background: {\n                //     default: \"#000000\"\n                // },\n        \n                speakMessages: {\n                    main: \"#09214e\",\n                    contrastText: \"#FFFFFF\"\n                },\n        \n                listenMessages: {\n                    main: \"#5c3f19\",\n                    contrastText: \"#FFFFFF\"\n                },\n\n                talkerActive: {\n                    main: \"#00FF00\"\n                },\n\n                talkerNotActive: {\n                    main: \"#FF0000\"\n                },\n        \n                contrastThreshold: 7,\n                tonalOffset: 0\n            }\n        });\n\n    } else if (name === \"sepia\") {\n        return createMuiTheme({\n            palette: {\n                type: \"light\",\n        \n                primary: {\n                    main: \"#ffebcd\",\n                    contrastText: \"#000000\"\n                },\n        \n                secondary: {\n                    main: \"#ffebcd\",\n                    contrastText: \"#000000\"\n                },\n\n                background: {\n                    paper: \"#ffebcd\",\n                    default: \"#ffebcd\"\n                },\n\n                text: {\n                    primary: \"#000000\",\n                    scondary: \"#000000\"\n                },\n\n                // action: {\n                //     focus: \"#000000\",\n                //     hover: \"#000000\",\n                //     active: \"#000000\",\n                //     selected: \"#000000\"\n                // },\n        \n                speakMessages: {\n                    main: \"#729be7\",\n                    contrastText: \"#FFFFFF\"\n                },\n        \n                listenMessages: {\n                    main: \"#daaa71\",\n                    contrastText: \"#FFFFFF\"\n                },\n\n                talkerActive: {\n                    main: \"#00AA00\"\n                },\n\n                talkerNotActive: {\n                    main: \"#AA0000\"\n                },\n        \n                contrastThreshold: 7,\n                tonalOffset: 0\n            }\n        });\n    }\n}\n","import { useEffect, useState } from \"react\";\nimport Talker from \"./../../talker/Talker\";\n\nfunction getScreenSize() {\n    return {\n        width: window.innerWidth,\n        height: window.innerHeight\n    };\n}\n\nexport function useInnerScreenSize() {\n    const [size, changeSize] = useState(getScreenSize());\n\n    useEffect(() => {\n        function handleResize() {\n            changeSize(getScreenSize());\n        }\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n            window.removeEventListener(\"resize\", handleResize);\n        }\n    });\n\n    return size;\n}\n\nexport function useTalkerMonitor(listenEnabled = false, speakEnabled = false) {\n    const [talker, setTalker] = useState(new Talker());\n    const [isListenEnabled, setTalkerListen] = useState(listenEnabled);\n    const [isSpeakEnabled, setTalkerSpeak] = useState(speakEnabled);\n\n    return {\n        talker,\n        setTalker,\n        isListenEnabled,\n        setTalkerListen,\n        isSpeakEnabled,\n        setTalkerSpeak\n    };\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}